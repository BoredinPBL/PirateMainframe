// Generated by gencpp from file piratemainframe/RawControl.msg
// DO NOT EDIT!


#ifndef PIRATEMAINFRAME_MESSAGE_RAWCONTROL_H
#define PIRATEMAINFRAME_MESSAGE_RAWCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace piratemainframe
{
template <class ContainerAllocator>
struct RawControl_
{
  typedef RawControl_<ContainerAllocator> Type;

  RawControl_()
    : start(false)
    , back(false)
    , trig_l(false)
    , trig_r(false)
    , trig_l_val(0.0)
    , trig_r_val(0.0)
    , bump_l(false)
    , bump_r(false)
    , but_x(false)
    , but_y(false)
    , but_a(false)
    , but_b(false)
    , axis_lx(0.0)
    , axis_ly(0.0)
    , axis_rx(0.0)
    , axis_ry(0.0)
    , axis_dx(0)
    , axis_dy(0)  {
    }
  RawControl_(const ContainerAllocator& _alloc)
    : start(false)
    , back(false)
    , trig_l(false)
    , trig_r(false)
    , trig_l_val(0.0)
    , trig_r_val(0.0)
    , bump_l(false)
    , bump_r(false)
    , but_x(false)
    , but_y(false)
    , but_a(false)
    , but_b(false)
    , axis_lx(0.0)
    , axis_ly(0.0)
    , axis_rx(0.0)
    , axis_ry(0.0)
    , axis_dx(0)
    , axis_dy(0)  {
  (void)_alloc;
    }



   typedef uint8_t _start_type;
  _start_type start;

   typedef uint8_t _back_type;
  _back_type back;

   typedef uint8_t _trig_l_type;
  _trig_l_type trig_l;

   typedef uint8_t _trig_r_type;
  _trig_r_type trig_r;

   typedef double _trig_l_val_type;
  _trig_l_val_type trig_l_val;

   typedef double _trig_r_val_type;
  _trig_r_val_type trig_r_val;

   typedef uint8_t _bump_l_type;
  _bump_l_type bump_l;

   typedef uint8_t _bump_r_type;
  _bump_r_type bump_r;

   typedef uint8_t _but_x_type;
  _but_x_type but_x;

   typedef uint8_t _but_y_type;
  _but_y_type but_y;

   typedef uint8_t _but_a_type;
  _but_a_type but_a;

   typedef uint8_t _but_b_type;
  _but_b_type but_b;

   typedef double _axis_lx_type;
  _axis_lx_type axis_lx;

   typedef double _axis_ly_type;
  _axis_ly_type axis_ly;

   typedef double _axis_rx_type;
  _axis_rx_type axis_rx;

   typedef double _axis_ry_type;
  _axis_ry_type axis_ry;

   typedef int8_t _axis_dx_type;
  _axis_dx_type axis_dx;

   typedef int8_t _axis_dy_type;
  _axis_dy_type axis_dy;





  typedef boost::shared_ptr< ::piratemainframe::RawControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piratemainframe::RawControl_<ContainerAllocator> const> ConstPtr;

}; // struct RawControl_

typedef ::piratemainframe::RawControl_<std::allocator<void> > RawControl;

typedef boost::shared_ptr< ::piratemainframe::RawControl > RawControlPtr;
typedef boost::shared_ptr< ::piratemainframe::RawControl const> RawControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piratemainframe::RawControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piratemainframe::RawControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piratemainframe

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'piratemainframe': ['/home/legionhive/GitPlayground/ws_PirateMainframe/src/piratemainframe/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piratemainframe::RawControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piratemainframe::RawControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piratemainframe::RawControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piratemainframe::RawControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piratemainframe::RawControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piratemainframe::RawControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piratemainframe::RawControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "135159b3cd4aa3c315e44b7ff5f11ef3";
  }

  static const char* value(const ::piratemainframe::RawControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x135159b3cd4aa3c3ULL;
  static const uint64_t static_value2 = 0x15e44b7ff5f11ef3ULL;
};

template<class ContainerAllocator>
struct DataType< ::piratemainframe::RawControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piratemainframe/RawControl";
  }

  static const char* value(const ::piratemainframe::RawControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piratemainframe::RawControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for raw user controller input.\n\
\n\
bool start\n\
bool back\n\
\n\
bool trig_l  # Left trigger down?\n\
bool trig_r  # Right trigger down?\n\
\n\
float64 trig_l_val # Left trigger down?\n\
float64 trig_r_val # Right trigger down?\n\
\n\
bool bump_l  # Left bumper down?\n\
bool bump_r  # Right bumper down?\n\
\n\
bool but_x   # \"X\" button has been triggered?\n\
bool but_y   # \"Y\" button has been triggered?\n\
bool but_a   # \"A\" button has been triggered?\n\
bool but_b   # \"B\" button has been triggered?\n\
\n\
float64 axis_lx  # Normalised left stick x, -1 to 1\n\
float64 axis_ly  # Normalised left stick y, -1 to 1\n\
\n\
float64 axis_rx  # Normalised right stick x, -1 to 1\n\
float64 axis_ry  # Normalised right stick y, -1 to 1\n\
\n\
int8 axis_dx  # d-pad x, -1 left, 0 none/both or 1 right\n\
int8 axis_dy  # d-pad y, -1 down, 0 none/both or 1 up\n\
";
  }

  static const char* value(const ::piratemainframe::RawControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piratemainframe::RawControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.back);
      stream.next(m.trig_l);
      stream.next(m.trig_r);
      stream.next(m.trig_l_val);
      stream.next(m.trig_r_val);
      stream.next(m.bump_l);
      stream.next(m.bump_r);
      stream.next(m.but_x);
      stream.next(m.but_y);
      stream.next(m.but_a);
      stream.next(m.but_b);
      stream.next(m.axis_lx);
      stream.next(m.axis_ly);
      stream.next(m.axis_rx);
      stream.next(m.axis_ry);
      stream.next(m.axis_dx);
      stream.next(m.axis_dy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piratemainframe::RawControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piratemainframe::RawControl_<ContainerAllocator>& v)
  {
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
    s << indent << "back: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back);
    s << indent << "trig_l: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trig_l);
    s << indent << "trig_r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trig_r);
    s << indent << "trig_l_val: ";
    Printer<double>::stream(s, indent + "  ", v.trig_l_val);
    s << indent << "trig_r_val: ";
    Printer<double>::stream(s, indent + "  ", v.trig_r_val);
    s << indent << "bump_l: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bump_l);
    s << indent << "bump_r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bump_r);
    s << indent << "but_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.but_x);
    s << indent << "but_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.but_y);
    s << indent << "but_a: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.but_a);
    s << indent << "but_b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.but_b);
    s << indent << "axis_lx: ";
    Printer<double>::stream(s, indent + "  ", v.axis_lx);
    s << indent << "axis_ly: ";
    Printer<double>::stream(s, indent + "  ", v.axis_ly);
    s << indent << "axis_rx: ";
    Printer<double>::stream(s, indent + "  ", v.axis_rx);
    s << indent << "axis_ry: ";
    Printer<double>::stream(s, indent + "  ", v.axis_ry);
    s << indent << "axis_dx: ";
    Printer<int8_t>::stream(s, indent + "  ", v.axis_dx);
    s << indent << "axis_dy: ";
    Printer<int8_t>::stream(s, indent + "  ", v.axis_dy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIRATEMAINFRAME_MESSAGE_RAWCONTROL_H
